name: EPG-MX

on:
  workflow_dispatch: {}
  schedule:
    - cron: '0 7 * * *' # daily 07:00 UTC

concurrency:
  group: epg-mx
  cancel-in-progress: true

jobs:
  mx:
    runs-on: ubuntu-latest
    timeout-minutes: 300

    env:
      MX_SEARCH_URL: https://iptv-org.github.io/?q=live%20country:MX
      MX_EPG_URLS: >-
        https://epgshare01.online/epgshare01/epg_ripper_US1.xml.gz
        https://epgshare01.online/epgshare01/epg_ripper_US_LOCALS2.xml.gz
        https://epgshare01.online/epgshare01/epg_ripper_MX1.xml.gz
      MX_M3U_URL: ''
      HEADLESS: 'true'
      MAX_CHANNELS: '0'
      PER_PAGE_DELAY_MS: '150'
      NAV_TIMEOUT_MS: '30000'
      PROBE_TIMEOUT_MS: '5000'
      FUZZY_MIN: '0.45'
      LOG_UNMATCHED: '1'
      INGEST_PROGRAMS: '1'
      PROGRAMS_HOURS_AHEAD: '36'
      SUPABASE_SCHEMA: public
      SUPABASE_TABLE: mx_channels
      PROGRAMS_TABLE: epg_programs
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
      NORDVPN_TOKEN: ${{ secrets.NORDVPN_TOKEN }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Node deps (Playwright, Supabase, Saxes)
        run: |
          set -euo pipefail
          npm i --no-save playwright saxes @supabase/supabase-js
          npx playwright install --with-deps chromium

      - name: Install NordVPN CLI (non-interactive)
        if: ${{ env.NORDVPN_TOKEN != '' }}
        run: |
          set -euo pipefail
          sudo apt-get update
          sudo apt-get install -y curl gnupg expect
          curl -sSf https://repo.nordvpn.com/gpg/nordvpn_public.asc \
            | sudo gpg --dearmor -o /usr/share/keyrings/nordvpn-archive-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/nordvpn-archive-keyring.gpg] https://repo.nordvpn.com/deb/nordvpn/debian stable main" \
            | sudo tee /etc/apt/sources.list.d/nordvpn.list
          sudo apt-get update
          sudo apt-get install -y nordvpn
          sudo systemctl enable --now nordvpnd || true

      - name: Write non-interactive nordvpn wrapper
        if: ${{ env.NORDVPN_TOKEN != '' }}
        run: |
          set -euo pipefail
          mkdir -p scripts
          cat > scripts/nordvpn.exp <<'EXP'
          #!/usr/bin/expect -f
          set timeout 120
          if {$argc < 1} { exit 2 }
          spawn sudo nordvpn {*}$argv
          expect {
            -re "(?i)Do you allow.*\\(y/n\\)" { send -- "no\r"; exp_continue }
            -re "(?i)answer with yes/no"     { send -- "no\r"; exp_continue }
            eof
          }
          EXP
          chmod +x scripts/nordvpn.exp

      - name: NordVPN login & connect (Mexico)
        if: ${{ env.NORDVPN_TOKEN != '' }}
        run: |
          set -euo pipefail
          scripts/nordvpn.exp login --token "$NORDVPN_TOKEN"
          scripts/nordvpn.exp set analytics off
          scripts/nordvpn.exp set technology nordlynx
          scripts/nordvpn.exp set firewall off
          scripts/nordvpn.exp set killswitch off
          scripts/nordvpn.exp connect Mexico
          for i in $(seq 1 30); do
            if scripts/nordvpn.exp status | grep -qi "Status: Connected"; then
              echo "NordVPN connected (Mexico)."
              break
            fi
            sleep 2
          done

      - name: Write scraper script
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p scripts out/mx
          cat > scripts/mx-scrape-and-match.mjs <<'EOF'
// ===================== mx-scrape-and-match.mjs =====================
import { chromium } from 'playwright';
import { createGunzip } from 'node:zlib';
import { Readable } from 'node:stream';
import fs from 'node:fs/promises';
import path from 'node:path';
import { setTimeout as delay } from 'node:timers/promises';
import { createClient } from '@supabase/supabase-js';
import { SaxesParser } from 'saxes';

const SEARCH_URL = process.env.MX_SEARCH_URL || 'https://iptv-org.github.io/?q=live%20country:MX';
const EPG_URLS = (process.env.MX_EPG_URLS || '').trim().split(/\s+/).filter(Boolean);
const M3U_URL = (process.env.MX_M3U_URL || '').trim();

const HEADLESS = (process.env.HEADLESS ?? 'true') !== 'false';
const MAX_CHANNELS = Number(process.env.MAX_CHANNELS || '0');
const PER_PAGE_DELAY_MS = Number(process.env.PER_PAGE_DELAY_MS || '150');
const NAV_TIMEOUT_MS = Number(process.env.NAV_TIMEOUT_MS || '30000');
const PROBE_TIMEOUT_MS = Number(process.env.PROBE_TIMEOUT_MS || '5000');

const FUZZY_MIN = Number(process.env.FUZZY_MIN || '0.45');
const LOG_UNMATCHED = process.env.LOG_UNMATCHED === '1';

const INGEST_PROGRAMS = process.env.INGEST_PROGRAMS === '1';
const PROGRAMS_HOURS_AHEAD = Number(process.env.PROGRAMS_HOURS_AHEAD || '36');

const SUPABASE_URL = process.env.SUPABASE_URL || '';
const SUPABASE_SERVICE_KEY = process.env.SUPABASE_SERVICE_KEY || '';
const SUPABASE_SCHEMA = process.env.SUPABASE_SCHEMA || 'public';
const SUPABASE_TABLE = process.env.SUPABASE_TABLE || 'mx_channels';
const PROGRAMS_TABLE = process.env.PROGRAMS_TABLE || 'epg_programs';

const nowIso = () => new Date().toISOString();

function stripAccents(s){return String(s).normalize('NFD').replace(/\p{Diacritic}+/gu,'');}
function normalizeNumerals(s){const map={uno:'1',dos:'2',tres:'3',cuatro:'4',cinco:'5',seis:'6',siete:'7',ocho:'8',nueve:'9',diez:'10',once:'11',doce:'12',trece:'13'};return String(s).replace(/\b(uno|dos|tres|cuatro|cinco|seis|siete|ocho|nueve|diez|once|doce|trece)\b/gi,m=>map[m.toLowerCase()]);}
function dropTimeshift(s){return String(s).replace(/(?:[-+]\s*\d+\s*(?:h|hora|horas)\b)/ig,'').replace(/\b\d+\s*horas?\b/ig,'').replace(/\(\s*\d+\s*horas?\s*\)/ig,'').replace(/\btime\s*shift\b/ig,'').replace(/\s{2,}/g,' ').trim();}
function stripLeadingCanal(s){return String(s).replace(/^\s*canal[\s._-]+/i,'');}
function stripCountryTail(s){return String(s).replace(/(\.(mx|us)|\s+\(?mx\)?|\s+m[eé]xico|\s+usa|\s+eeuu)\s*$/i,'').trim();}
const STOP=new Set(['canal','tv','television','hd','sd','mx','mexico','méxico','hora','horas','us','usa','eeuu']);
function tokensOf(s){if(!s)return[];let p=stripAccents(normalizeNumerals(String(s).toLowerCase()));p=dropTimeshift(p);p=stripCountryTail(p);p=p.replace(/&/g,' and ').replace(/[^a-z0-9]+/g,' ').trim();return p.split(/\s+/).filter(t=>t&&!STOP.has(t));}
function keyOf(s){return Array.from(new Set(tokensOf(s))).sort().join(' ');}
function expandNameVariants(s){if(!s)return[];const out=new Set();const orig=String(s).trim();const noCanal=stripLeadingCanal(orig);const flat=x=>x.replace(/[._(),]+/g,' ').replace(/\s+/g,' ').trim();const noTS=dropTimeshift(noCanal);const noTail=stripCountryTail(noTS);[orig,noCanal,noTS,noTail,flat(orig),flat(noCanal),flat(noTS),flat(noTail)].forEach(v=>{if(v)out.add(v);});return[...out];}
function uniqBy(arr,keyFn){const m=new Map();for(const x of arr){const k=keyFn(x);if(!m.has(k))m.set(k,x);}return[...m.values()];}
function levenshtein(a,b){a=String(a);b=String(b);const n=a.length,m=b.length;if(n===0)return m;if(m===0)return n;let prev=new Array(m+1),curr=new Array(m+1);for(let j=0;j<=m;j++)prev[j]=j;for(let i=1;i<=n;i++){curr[0]=i;const ca=a.charCodeAt(i-1);for(let j=1;j<=m;j++){const cb=b.charCodeAt(j-1);const cost=(ca===cb)?0:1;curr[j]=Math.min(prev[j]+1,curr[j-1]+1,prev[j-1]+cost);}const tmp=prev;prev=curr;curr=tmp;}return prev[m];}
function bestByLevenshtein(target,candidates){const t=stripAccents(String(target).toLowerCase());let best=null,bestD=Infinity;for(const c of candidates){const cc=stripAccents(String(c).toLowerCase());const d=levenshtein(t,cc);if(d<bestD){bestD=d;best=c;}}return{candidate:best,distance:bestD};}

async function collectChannelPages(browser){const page=await browser.newPage();page.setDefaultTimeout(NAV_TIMEOUT_MS);await page.goto(SEARCH_URL,{waitUntil:'domcontentloaded'});await page.waitForSelector('a[href*="/channels/"]',{timeout:15000}).catch(()=>{});await page.waitForTimeout(1000);let items=await page.$$eval('a[href*="/channels/"]',as=>{const out=[];for(const a of as){const href=a.getAttribute('href')||'';if(!href.includes('/channels/'))continue;const url=new URL(href,location.href).href;const name=(a.textContent||'').trim();out.push({url,name});}const m=new Map();for(const it of out)if(!m.has(it.url))m.set(it.url,it);return[...m.values()];});items=items.filter(i=>i.name&&i.url);items=uniqBy(items,x=>x.url);if(MAX_CHANNELS>0&&items.length>MAX_CHANNELS)items=items.slice(0,MAX_CHANNELS);await page.close();return items.map(i=>({...i,nameKey:keyOf(i.name)}));}
async function scrapeChannel(browser,link){const page=await browser.newPage();page.setDefaultTimeout(NAV_TIMEOUT_MS);try{await page.goto(link.url,{waitUntil:'domcontentloaded'});await page.waitForTimeout(500);const tab=await page.$('text=Streams');if(tab){await tab.click().catch(()=>{});await page.waitForTimeout(400);}let anchors=await page.$$eval('a[href*=".m3u8"]',els=>els.map(e=>({url:e.href,text:(e.textContent||'').trim()})));if(!anchors.length){const html=await page.content();const rx=/https?:\/\/[^\s"'<>]+\.m3u8[^\s"'<>]*/gi;const set=new Set();let m;while((m=rx.exec(html)))set.add(m[0]);anchors=[...set].map(u=>({url:u,text:''}));}anchors=uniqBy(anchors.filter(a=>/^https?:\/\//i.test(a.url)),a=>a.url);return anchors.map(a=>({url:a.url,quality:(a.text.match(/\b(1080p|720p|480p|360p|HD|SD)\b/i)||[])[0]||null}));}catch(e){console.error(`Error scraping ${link.url}: ${e.message}`);return [];}finally{await page.close();}}
async function scrapeAll(browser,links){const out=[];for(const lnk of links){const streams=await scrapeChannel(browser,lnk);if(streams.length)out.push({channelName:lnk.name,channelNameKey:lnk.nameKey,streams});await delay(PER_PAGE_DELAY_MS);}return out;}
async function probeM3U8(url){const ac=new AbortController();const t=setTimeout(()=>ac.abort(),PROBE_TIMEOUT_MS);try{const r=await fetch(url,{method:'GET',headers:{'user-agent':'Mozilla/5.0','accept':'application/vnd.apple.mpegurl,text/plain,*/*'},signal:ac.signal});if(!r.ok)return false;const txt=await r.text();return txt.includes('#EXTM3U');}catch{return false;}finally{clearTimeout(t);}}

async function fetchM3UMap(){if(!M3U_URL)return{titleToId:new Map(),allTitles:[],idSet:new Set()};const res=await fetch(M3U_URL);if(!res.ok){console.warn(`M3U fetch failed ${res.status} ${M3U_URL}`);return{titleToId:new Map(),allTitles:[],idSet:new Set()};}const text=await res.text();const titleToId=new Map(),idSet=new Set(),allTitles=[];let currentAttrs=null,currentTitle=null;const attrRe=/([a-z0-9_-]+)="([^"]*)"/ig;for(const line of text.split(/\r?\n/)){if(line.startsWith('#EXTINF')){currentAttrs={};let m;while((m=attrRe.exec(line)))currentAttrs[m[1]]=m[2];const idx=line.indexOf(',');currentTitle=idx>=0?line.slice(idx+1).trim():null;}else if(line && !line.startsWith('#')){if(currentTitle){const id=(currentAttrs?.['tvg-id']||'').trim();if(id){titleToId.set(stripAccents(currentTitle.toLowerCase()),id);idSet.add(id);allTitles.push(currentTitle);}}currentAttrs=null;currentTitle=null;}}return{titleToId,allTitles,idSet};}

function containsMexicoTag(s){const t=stripAccents(String(s).toLowerCase());return /\.mx\b/.test(s)||/\bmexico\b/.test(t)||/\bmx\b/.test(t);}
async function parseOneEpgChannels(url,agg,forceAllMex){console.log(`Downloading EPG (stream)… ${url}`);const res=await fetch(url);if(!res.ok||!res.body)throw new Error(`Fetch failed ${res.status} ${url}`);const gunzip=createGunzip();const src=Readable.fromWeb(res.body);const decoder=new TextDecoder('utf-8');const parser=new SaxesParser({xmlns:false});const MAX_NAME_CHARS=1024,MAX_NAMES_PER_CH=24,MAX_VARIANTS=64;let cur=null,inDisp=false,disp=[],dispLen=0,trunc=false;parser.on('error',e=>{throw e;});parser.on('opentag',tag=>{const nm=String(tag.name).toLowerCase();if(nm==='channel')cur={id:tag.attributes?.id?String(tag.attributes.id):'',namesRaw:[]};else if(nm==='display-name'&&cur){inDisp=true;disp=[];dispLen=0;trunc=false;}else if(nm==='programme'){const cid=tag.attributes?.channel;if(cid)agg.programmesSeen.add(String(cid));}});parser.on('text',t=>{if(!inDisp||!cur||!t||trunc)return;let chunk=String(t);if(chunk.length>MAX_NAME_CHARS)chunk=chunk.slice(0,MAX_NAME_CHARS);const remain=MAX_NAME_CHARS-dispLen;if(remain<=0){trunc=true;return;}if(chunk.length>remain){chunk=chunk.slice(0,remain);trunc=true;}if(chunk){disp.push(chunk);dispLen+=chunk.length;}});parser.on('closetag',nameRaw=>{const nm=String(nameRaw).toLowerCase();if(nm==='display-name'&&cur){if(cur.namesRaw.length<MAX_NAMES_PER_CH){const t=disp.length?disp.join(''):'';const clean=t.trim();if(clean)cur.namesRaw.push(clean);}inDisp=false;disp=[];dispLen=0;trunc=false;}else if(nm==='channel'&&cur){const id=cur.id||'';const keep=forceAllMex||containsMexicoTag(id)||cur.namesRaw.some(n=>containsMexicoTag(n));if(keep){const names=new Set();for(const n of cur.namesRaw)for(const v of expandNameVariants(n))if(v)names.add(v);for(const v of expandNameVariants(id))if(v)names.add(v);const limited=[];for(const v of names){limited.push(v);if(limited.length>=MAX_VARIANTS)break;}let entry=agg.idMap.get(id);if(!entry){entry={id,names:[],tokenSet:new Set(),hasProgs:false};agg.idMap.set(id,entry);}entry.names=Array.from(new Set(entry.names.concat(limited))).slice(0,MAX_VARIANTS);entry.tokenSet=new Set();for(const nm2 of entry.names)for(const tok of tokensOf(nm2))entry.tokenSet.add(tok);for(const n of entry.names){const k=keyOf(n);if(k&&!agg.nameMap.has(k))agg.nameMap.set(k,entry);}}cur=null;inDisp=false;disp=[];dispLen=0;trunc=false;}});await new Promise((resolve,reject)=>{src.on('error',reject);gunzip.on('error',reject);gunzip.on('data',chunk=>{const text=decoder.decode(chunk,{stream:true});if(text)parser.write(text);});gunzip.on('end',()=>{parser.write(decoder.decode(new Uint8Array(),{stream:false}));parser.close();resolve();});src.pipe(gunzip);});}
async function parseAllEpgChannels(urls){const agg={idMap:new Map(),nameMap:new Map(),programmesSeen:new Set()};for(const url of urls){const forceAllMex=/_MX/i.test(url);await parseOneEpgChannels(url,agg,forceAllMex);}const kept=new Set([...agg.nameMap.values()]);console.log(`EPG entries kept (Mexico-related): ${kept.size}`);return {idMap:agg.idMap,nameMap:agg.nameMap,entries:[...kept]};}

function jaccard(aTokens,bTokens){const A=new Set(aTokens),B=new Set(bTokens);let inter=0;for(const t of A)if(B.has(t))inter++;return inter/(A.size+B.size-inter||1);}
function mapTvgIdToEpg(tvgId,idMap){if(!tvgId)return null;if(idMap.has(tvgId))return idMap.get(tvgId);const dropped=tvgId.replace(/^Canal\./i,'');if(idMap.has(dropped))return idMap.get(dropped);const flat=tvgId.replace(/[._]+/g,' ').replace(/\s+/g,' ').trim();for(const [id,entry] of idMap.entries()){const f=id.replace(/[._]+/g,' ').replace(/\s+/g,' ').trim();if(f.toLowerCase()===flat.toLowerCase())return entry;}return null;}
function findByTitle(channelName,nameKey,nameMap,entries){const exact=nameMap.get(nameKey);if(exact)return{entry:exact,score:1,method:'title-exact'};const sTokArr=tokensOf(channelName);const sTok=new Set(sTokArr);if(sTok.size===1){const[only]=[...sTok];for(const e of entries)if(e.tokenSet&&e.tokenSet.has(only))return{entry:e,score:0.99,method:'anchor'};}let subsetBest=null,subsetBestSize=Infinity;for(const e of entries){const E=e.tokenSet||new Set();let allIn=true;for(const t of sTok){if(!E.has(t)){allIn=false;break;}}if(allIn&&E.size<subsetBestSize){subsetBest=e;subsetBestSize=E.size;}}if(subsetBest)return{entry:subsetBest,score:0.9,method:'subset'};let best=null,bestScore=0;for(const e of entries)for(const nm of e.names){const score=jaccard(sTokArr,tokensOf(nm));if(score>bestScore){bestScore=score;best=e;}}if(best&&bestScore>=FUZZY_MIN)return{entry:best,score:bestScore,method:'fuzzy'};return{entry:null,score:0,method:'none'};}

function parseXmltvTs(s){const m=String(s).match(/^(\d{4})(\d{2})(\d{2})(\d{2})(\d{2})(\d{2})(?:\s*([+-]\d{4}))?/);if(!m)return null;const[_,Y,Mo,D,h,mi,se,off]=m;const iso=`${Y}-${Mo}-${D}T${h}:${mi}:${se}${off?(off.slice(0,3)+':'+off.slice(3)):'Z'}`;const d=new Date(iso);return isNaN(d.getTime())?null:d.toISOString();}
async function parseProgramsForChannels(url,wantedIds,sinceISO,untilISO,sink){const res=await fetch(url);if(!res.ok||!res.body)throw new Error(`Fetch failed ${res.status} ${url}`);const gunzip=createGunzip();const src=Readable.fromWeb(res.body);const decoder=new TextDecoder('utf-8');const parser=new SaxesParser({xmlns:false});let cur=null,tagStack=[];const textBuf=new Map();const pushText=(name,t)=>{if(!name)return;const old=textBuf.get(name)||'';textBuf.set(name,(old+t));};const getAndClear=(name)=>{const v=(textBuf.get(name)||'').trim();textBuf.delete(name);return v;};const clearAll=()=>{textBuf.clear();};const inWanted=(cid)=>wantedIds.has(String(cid));const inWindow=(sISO,eISO)=>{if(!sISO||!eISO)return false;return !(eISO<=sinceISO||sISO>=untilISO);};parser.on('error',e=>{throw e;});parser.on('opentag',tag=>{const nm=String(tag.name).toLowerCase();tagStack.push(nm);if(nm==='programme'){const ch=String(tag.attributes?.channel||'');const start=parseXmltvTs(tag.attributes?.start||'');const stop=parseXmltvTs(tag.attributes?.stop||'');cur={channel_id:ch,start_ts:start,stop_ts:stop,title:null,sub_title:null,summary:null,icon_url:null,language:null,orig_language:null,categories:[],rating:null,star_rating:null,season:null,episode:null,episode_num_xmltv:null,credits:null,program_url:null,premiere:false,previously_shown:false,extras:{}};}else if(cur&&(nm==='title'||nm==='sub-title'||nm==='desc'||nm==='category'||nm==='icon'||nm==='rating'||nm==='star-rating'||nm==='episode-num'||nm==='credits'||nm==='url'||nm==='premiere'||nm==='previously-shown')){}});parser.on('text',t=>{if(!cur)return;const nm=tagStack[tagStack.length-1];if(!nm)return;pushText(nm,t);});parser.on('closetag',nameRaw=>{const nm=String(nameRaw).toLowerCase();if(!cur)return;if(nm==='title'){cur.title=cur.title??getAndClear('title');}else if(nm==='sub-title'){cur.sub_title=cur.sub_title??getAndClear('sub-title');}else if(nm==='desc'){cur.summary=cur.summary??getAndClear('desc');}else if(nm==='category'){const c=getAndClear('category');if(c)cur.categories.push(c);}else if(nm==='url'){const u=getAndClear('url');if(u)cur.program_url=u;}else if(nm==='premiere'){cur.premiere=true;}else if(nm==='previously-shown'){cur.previously_shown=true;}else if(nm==='episode-num'){const en=getAndClear('episode-num');if(en)cur.episode_num_xmltv=en;}else if(nm==='star-rating'){const sr=getAndClear('star-rating');if(sr)cur.star_rating=sr;}else if(nm==='rating'){const r=getAndClear('rating');if(r)cur.rating={value:r};}else if(nm==='programme'){clearAll();if(inWanted(cur.channel_id)&&inWindow(cur.start_ts,cur.stop_ts)){cur.ingested_at=nowIso();sink.push(cur);}cur=null;}tagStack.pop();});await new Promise((resolve,reject)=>{src.on('error',reject);gunzip.on('error',reject);gunzip.on('data',chunk=>{const text=decoder.decode(chunk,{stream:true});if(text)parser.write(text);});gunzip.on('end',()=>{parser.write(decoder.decode(new Uint8Array(),{stream:false}));parser.close();resolve();});src.pipe(gunzip);});}

async function upsertStreams(rows){if(!SUPABASE_URL||!SUPABASE_SERVICE_KEY){console.log('Supabase env missing; skipped DB upload.');return;}if(!rows.length){console.log('No stream rows to upload to Supabase.');return;}const sb=createClient(SUPABASE_URL,SUPABASE_SERVICE_KEY,{auth:{persistSession:false},db:{schema:SUPABASE_SCHEMA}});let { error } = await sb.from(SUPABASE_TABLE).upsert(rows,{onConflict:'stream_url',ignoreDuplicates:false});if(error){console.warn(`Upsert failed (${error.code??'no-code'}): ${error.message}. Falling back to insert…`);({ error } = await sb.from(SUPABASE_TABLE).insert(rows));}if(error){console.warn(`Insert failed: ${error.message} (${error.code??'no-code'})`);}else{console.log(`DB write OK (streams): ${rows.length} rows`);}}
async function insertPrograms(rows){if(!SUPABASE_URL||!SUPABASE_SERVICE_KEY){console.log('Supabase env missing; skipped DB upload.');return;}if(!rows.length){console.log('No programs to upload to Supabase.');return;}const sb=createClient(SUPABASE_URL,SUPABASE_SERVICE_KEY,{auth:{persistSession:false},db:{schema:SUPABASE_SCHEMA}});const { error } = await sb.from(PROGRAMS_TABLE).insert(rows,{defaultToNulls:true});if(error){console.warn(`Programs insert failed: ${error.message} (${error.code??'no-code'})`);}else{console.log(`DB write OK (programs): ${rows.length} rows`);}}

async function ensureDir(p){await fs.mkdir(p,{recursive:true});}
async function main(){
  await ensureDir('out/mx');
  const browser=await chromium.launch({headless:HEADLESS});
  let records=[],matchedOnly=[];
  try{
    console.log(`Scraping: ${SEARCH_URL}`);
    const links=await collectChannelPages(browser);
    console.log(`Found ${links.length} channel pages.`);
    const scraped=await scrapeAll(browser,links);
    console.log(`Channels with at least one .m3u8 (before probe): ${scraped.length}`);
    for(const row of scraped){const tested=[];for(const s of row.streams){if(await probeM3U8(s.url))tested.push(s);}row.streams=tested;}
    const filtered=scraped.filter(r=>r.streams.length>0);
    console.log(`Channels with at least one WORKING .m3u8: ${filtered.length}`);

    const { titleToId, allTitles } = await fetchM3UMap();
    if(!EPG_URLS.length) throw new Error('No EPG URLs provided in MX_EPG_URLS');
    const { idMap, nameMap, entries } = await parseAllEpgChannels(EPG_URLS);

    const wantedChannelIds=new Set();
    for(const r of filtered){
      let tvgId=null;
      const exactId = titleToId.get(stripAccents(r.channelName.toLowerCase()));
      if(exactId) tvgId=exactId;
      else if(allTitles.length){ const { candidate } = bestByLevenshtein(r.channelName, allTitles); if(candidate) tvgId = titleToId.get(stripAccents(candidate.toLowerCase())) || null; }
      let entry = mapTvgIdToEpg(tvgId, idMap); let method = entry ? 'tvg-id' : null;
      if(!entry){ const f=findByTitle(r.channelName, r.channelNameKey, nameMap, entries); entry=f.entry; method=f.method; }
      for(const s of r.streams){
        const rec={stream_url:s.url,channel_guess:r.channelName,epg_channel_id:entry?entry.id:null,epg_display_name:entry?(entry.names[0]||null):null,working:true,checked_at:nowIso()};
        records.push(rec);
        if(entry){ matchedOnly.push({...rec,_match_method:method}); wantedChannelIds.add(entry.id); }
      }
    }

    console.log(`Matched with EPG: ${matchedOnly.length} stream rows (across ${filtered.length} channels).`);
    await fs.writeFile(path.join('out','mx','records.json'),JSON.stringify(records,null,2),'utf8');
    await fs.writeFile(path.join('out','mx','matches.json'),JSON.stringify(matchedOnly,null,2),'utf8');
    if(LOG_UNMATCHED){const matchedUrls=new Set(matchedOnly.map(x=>x.stream_url));const unmatched=records.filter(x=>!matchedUrls.has(x.stream_url));await fs.writeFile(path.join('out','mx','unmatched.json'),JSON.stringify(unmatched,null,2),'utf8');}else{await fs.writeFile(path.join('out','mx','unmatched.json'),JSON.stringify([],null,2),'utf8');}
    await upsertStreams(records);

    if(INGEST_PROGRAMS && wantedChannelIds.size){
      const since=new Date(Date.now()-2*3600*1000), until=new Date(Date.now()+PROGRAMS_HOURS_AHEAD*3600*1000);
      const programs=[];
      for(const url of EPG_URLS){await parseProgramsForChannels(url,wantedChannelIds,since.toISOString(),until.toISOString(),programs);}
      await fs.writeFile(path.join('out','mx','epg_programs_sample.json'),JSON.stringify(programs.slice(0,200),null,2),'utf8');
      await insertPrograms(programs);
    }else{
      await fs.writeFile(path.join('out','mx','epg_programs_sample.json'),JSON.stringify([],null,2),'utf8');
    }
  }catch(e){
    console.error(e);
    try{
      await ensureDir('out/mx');
      if(records.length===0) await fs.writeFile(path.join('out','mx','records.json'),'[]','utf8');
      if(matchedOnly.length===0) await fs.writeFile(path.join('out','mx','matches.json'),'[]','utf8');
      await fs.writeFile(path.join('out','mx','unmatched.json'),'[]','utf8');
      await fs.writeFile(path.join('out','mx','epg_programs_sample.json'),'[]','utf8');
    }catch(_){}
    process.exit(1);
  }finally{
    await browser.close();
  }
}
main();
// =================== end file ===================
EOF

      - name: Run MX scrape & match
        run: node scripts/mx-scrape-and-match.mjs

      - name: NordVPN disconnect
        if: always()
        run: |
          set -euo pipefail
          if command -v nordvpn >/dev/null 2>&1; then
            sudo nordvpn disconnect || true
            sudo nordvpn status || true
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: mx-output
          path: |
            out/mx/records.json
            out/mx/matches.json
            out/mx/unmatched.json
            out/mx/epg_programs_sample.json
          if-no-files-found: warn

name: Kodi Video Addons Scanner

on:
  workflow_dispatch:
    inputs:
      addon_name_substr:
        description: 'Filter by name/summary containing (case-insensitive). Leave blank for all.'
        required: false
        default: ''
      max_addons:
        description: 'Limit number of addons to process (0 = no limit)'
        required: false
        default: '0'
  schedule:
    - cron: "0 9 * * 1" # every Monday 09:00 UTC

permissions:
  contents: read

concurrency:
  group: kodi-video-scan
  cancel-in-progress: true

jobs:
  scan:
    runs-on: ubuntu-latest
    timeout-minutes: 120
    defaults:
      run:
        shell: bash
    env:
      INDEX_URL: "https://raw.githubusercontent.com/thecrewwh/zips/master/matrix/_zip/addons.xml"
      ADDON_NAME_SUBSTR: "${{ github.event.inputs.addon_name_substr || '' }}"
      MAX_ADDONS: "${{ github.event.inputs.max_addons || '0' }}"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Write scanner script
        run: |
          set -euo pipefail
          mkdir -p scripts
          cat > scripts/kodi_video_scan.py <<'PY'
          #!/usr/bin/env python3
          import os, io, re, sys, json, zipfile, csv
          from urllib.parse import urlparse
          import xml.etree.ElementTree as ET

          INDEX_URL = os.environ.get("INDEX_URL", "https://raw.githubusercontent.com/thecrewwh/zips/master/matrix/_zip/addons.xml")
          ADDON_NAME_SUBSTR = (os.environ.get("ADDON_NAME_SUBSTR") or "").strip().lower()
          try:
            MAX_ADDONS = int(os.environ.get("MAX_ADDONS", "0"))
          except ValueError:
            MAX_ADDONS = 0

          ZIP_URL_TMPL = "https://github.com/thecrewwh/zips/raw/refs/heads/master/matrix/_zip/{id}/{id}-{ver}.zip"

          OUT_DIR = "out/kodi"
          ZIPS_DIR = os.path.join(OUT_DIR, "zips")
          REPORT_JSONL = os.path.join(OUT_DIR, "video_addons_report.jsonl")
          REPORT_CSV = os.path.join(OUT_DIR, "video_addons_summary.csv")
          M3U8_INDEX = os.path.join(OUT_DIR, "m3u8_index.txt")

          try:
              import requests
          except ModuleNotFoundError:
              import subprocess
              subprocess.check_call([sys.executable, "-m", "pip", "install", "requests"])
              import requests

          def fetch_text(url):
              r = requests.get(url, timeout=30)
              r.raise_for_status()
              return r.text

          def iter_addons_from_index(xml_text):
              root = ET.fromstring(xml_text.encode("utf-8"))
              for a in root.findall("addon"):
                  addon_id = a.get("id")
                  version = a.get("version")
                  name = a.get("name") or addon_id
                  summary = ""
                  sm = a.find("summary")
                  if sm is not None and sm.text:
                      summary = sm.text
                  if addon_id and version:
                      yield addon_id, name, summary, version

          def is_video_addon(addon_xml_bytes):
              """
              True if addon exposes a video plugin:
                - extension point in {"xbmc.addon.video", "kodi.addon.video"} OR
                - extension point in {"xbmc.python.pluginsource","kodi.python.pluginsource"}
                  with provides="video" (attr or child <provides>)
              """
              try:
                  root = ET.fromstring(addon_xml_bytes)
              except ET.ParseError:
                  return False, None
              human = root.get("name")
              def provides_video(ext):
                  pv = (ext.get("provides") or "").lower()
                  if "video" in pv:
                      return True
                  for ch in ext:
                      if ch.tag.lower().endswith("provides"):
                          if "video" in (ch.text or "").lower():
                              return True
                  return False

              for ext in root.findall("extension"):
                  point = (ext.get("point") or "").lower().strip()
                  if point in ("xbmc.addon.video", "kodi.addon.video"):
                      return True, human
                  if point in ("xbmc.python.pluginsource", "kodi.python.pluginsource"):
                      if provides_video(ext):
                          return True, human
              return False, human

          M3U8_RX = re.compile(r'https?://[^\s\'"<>]+\.m3u8[^\s\'"<>]*', re.IGNORECASE)

          def scan_zip_for_m3u8s(zf):
              hits = set()
              for zi in zf.infolist():
                  fn = zi.filename.lower()
                  if any(fn.endswith(ext) for ext in (".py",".json",".xml",".ini",".md",".txt",".js",".m3u8")):
                      try:
                          data = zf.read(zi)
                      except:
                          continue
                      try:
                          txt = data.decode("utf-8", errors="ignore")
                      except:
                          continue
                      for m in M3U8_RX.findall(txt):
                          hits.add(m)
              return sorted(hits)

          def find_addon_xml_in_zip(zf):
              for zi in zf.infolist():
                  nm = zi.filename.replace("\\","/")
                  if nm.endswith("/addon.xml") or nm == "addon.xml":
                      return zi.filename
              return None

          def main():
              os.makedirs(ZIPS_DIR, exist_ok=True)

              print(f"Index: {INDEX_URL}", file=sys.stderr)
              xml_text = fetch_text(INDEX_URL)

              candidates = []
              for addon_id, name, summary, version in iter_addons_from_index(xml_text):
                  if ADDON_NAME_SUBSTR:
                      blob = f"{name} {summary}".lower()
                      if ADDON_NAME_SUBSTR not in blob:
                          continue
                  candidates.append((addon_id, name, summary, version))

              if MAX_ADDONS and len(candidates) > MAX_ADDONS:
                  candidates = candidates[:MAX_ADDONS]

              print(f"Candidates: {len(candidates)}", file=sys.stderr)

              kept = 0
              rows_csv = []
              with open(REPORT_JSONL, "w", encoding="utf-8") as jf, open(M3U8_INDEX, "w", encoding="utf-8") as idx:
                  for addon_id, name, summary, version in candidates:
                      zip_url = ZIP_URL_TMPL.format(id=addon_id, ver=version)

                      # Download zip
                      try:
                          r = requests.get(zip_url, timeout=60)
                          r.raise_for_status()
                          content = r.content
                      except Exception as e:
                          print(f"[skip] {addon_id}-{version}: download error: {e}", file=sys.stderr)
                          continue

                      # Open zip
                      try:
                          zf = zipfile.ZipFile(io.BytesIO(content))
                      except Exception as e:
                          print(f"[skip] {addon_id}-{version}: bad zip: {e}", file=sys.stderr)
                          continue

                      # addon.xml
                      addon_xml_path = find_addon_xml_in_zip(zf)
                      if not addon_xml_path:
                          print(f"[skip] {addon_id}-{version}: no addon.xml", file=sys.stderr)
                          continue

                      try:
                          addon_xml_bytes = zf.read(addon_xml_path)
                      except Exception as e:
                          print(f"[skip] {addon_id}-{version}: cannot read addon.xml: {e}", file=sys.stderr)
                          continue

                      is_video, real_name = is_video_addon(addon_xml_bytes)
                      if not is_video:
                          continue

                      # Save zip (video only)
                      zip_name = f"{addon_id}-{version}.zip"
                      zip_path = os.path.join(ZIPS_DIR, zip_name)
                      if not os.path.exists(zip_path):
                          with open(zip_path, "wb") as f:
                              f.write(content)

                      # Scan for .m3u8
                      m3u8s = scan_zip_for_m3u8s(zf)
                      # Write per-hit index
                      for u in m3u8s:
                          idx.write(f"{addon_id}\t{version}\t{u}\n")

                      kept += 1
                      rec = {
                          "addon_id": addon_id,
                          "name": real_name or name or addon_id,
                          "version": version,
                          "zip_url": zip_url,
                          "zip_path": zip_path,
                          "probable_m3u8s": m3u8s,
                          "m3u8_count": len(m3u8s),
                          "summary": summary,
                      }
                      jf.write(json.dumps(rec, ensure_ascii=False) + "\n")

                      rows_csv.append([
                          addon_id,
                          real_name or name or addon_id,
                          version,
                          len(m3u8s),
                          (m3u8s[0] if m3u8s else ""),
                          zip_url
                      ])

              # CSV summary
              os.makedirs(OUT_DIR, exist_ok=True)
              with open(REPORT_CSV, "w", newline="", encoding="utf-8") as cf:
                  w = csv.writer(cf)
                  w.writerow(["addon_id","name","version","m3u8_count","first_m3u8","zip_url"])
                  w.writerows(rows_csv)

              print(f"Done. Kept {kept} video add-ons.", file=sys.stderr)
              print(f"- Zips: {ZIPS_DIR}/", file=sys.stderr)
              print(f"- JSONL: {REPORT_JSONL}", file=sys.stderr)
              print(f"- CSV: {REPORT_CSV}", file=sys.stderr)
              print(f"- Index: {M3U8_INDEX}", file=sys.stderr)

          if __name__ == "__main__":
              main()
          PY
          chmod +x scripts/kodi_video_scan.py

      - name: Run scanner
        run: |
          set -euo pipefail
          python3 scripts/kodi_video_scan.py

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: kodi-video-addons
          path: |
            out/kodi/zips
            out/kodi/video_addons_report.jsonl
            out/kodi/video_addons_summary.csv
            out/kodi/m3u8_index.txt
          if-no-files-found: warn
